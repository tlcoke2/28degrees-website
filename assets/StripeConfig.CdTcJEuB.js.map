{"version":3,"file":"StripeConfig.CdTcJEuB.js","sources":["../../node_modules/@mui/icons-material/esm/Refresh.js","../../src/services/stripeService.ts","../../src/pages/admin/StripeConfig.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z\"\n}), 'Refresh');","// src/services/stripeService.ts\nimport { api } from './http';\n\n// --- Types ---\nexport interface StripeConfig {\n  isActive: boolean;\n  publishableKey: string;\n  secretKey?: string;      // admin only\n  webhookSecret?: string;  // admin only\n  commissionRate: number;  // percent, e.g. 10 = 10%\n  currency: string;        // e.g. 'USD'\n  updatedAt?: string;\n}\n\n// --- Endpoint paths (api base is /api/v1 from the axios instance) ---\nconst ADMIN_CONFIG = '/admin/stripe/config';\nconst ADMIN_TEST   = '/admin/stripe/test-connection';\nconst PUBLIC_CONFIG = '/stripe/public-config';\n\n// Helper: include admin bearer token from localStorage\nfunction adminAuthHeaders() {\n  if (typeof window === 'undefined') return {};\n  const token = localStorage.getItem('adminToken');\n  return token ? { Authorization: `Bearer ${token}` } : {};\n}\n\n/* -------------------------- ADMIN (protected) -------------------------- */\n\n// Admin-only: Get full config\nexport const getStripeConfig = async (): Promise<StripeConfig> => {\n  const headers = adminAuthHeaders();\n  if (!('Authorization' in headers)) {\n    throw new Error('Admin authentication required. Please log in to the admin panel.');\n  }\n  const res = await api.get(ADMIN_CONFIG, { headers });\n  const payload = res?.data?.data ?? res?.data;\n  if (!payload) throw new Error('No Stripe config returned from server');\n  return payload as StripeConfig;\n};\n\n// Admin-only: Update config\nexport const updateStripeConfig = async (config: Partial<StripeConfig>): Promise<StripeConfig> => {\n  const headers = adminAuthHeaders();\n  if (!('Authorization' in headers)) {\n    throw new Error('Admin authentication required. Please log in to the admin panel.');\n  }\n  const res = await api.put(ADMIN_CONFIG, config, { headers });\n  const payload = res?.data?.data ?? res?.data;\n  if (!payload) throw new Error('Failed to update Stripe config');\n  return payload as StripeConfig;\n};\n\n// Admin-only: Test Stripe credentials (no body required)\nexport const testStripeConnection = async (): Promise<{ success: boolean; message?: string }> => {\n  try {\n    const headers = adminAuthHeaders();\n    if (!('Authorization' in headers)) {\n      throw new Error('Admin authentication required. Please log in to the admin panel.');\n    }\n    const res = await api.post(ADMIN_TEST, undefined, { headers });\n    const success = Boolean(res?.data?.success ?? res?.data?.data?.success);\n    const message = res?.data?.message ?? res?.data?.data?.message;\n    return { success, message };\n  } catch (error: any) {\n    const message =\n      error?.response?.data?.message ||\n      error?.message ||\n      'Failed to connect to Stripe';\n    return { success: false, message };\n  }\n};\n\n/* --------------------------- PUBLIC (safe) --------------------------- */\n\n// Public: Get safe (client) config (no secrets)\nexport const getPublicStripeConfig = async (): Promise<\n  Omit<StripeConfig, 'secretKey' | 'webhookSecret'>\n> => {\n  try {\n    const res = await api.get(PUBLIC_CONFIG);\n    const payload = res?.data?.data ?? res?.data ?? {};\n    return payload as Omit<StripeConfig, 'secretKey' | 'webhookSecret'>;\n  } catch (err) {\n    console.error('Error fetching public Stripe config:', err);\n    return {} as Omit<StripeConfig, 'secretKey' | 'webhookSecret'>;\n  }\n};\n\n// Initialize Stripe.js on the client using the public publishable key\nexport const initializeStripe = async () => {\n  try {\n    const cfg = await getPublicStripeConfig();\n    if (typeof window !== 'undefined' && cfg?.publishableKey) {\n      const { loadStripe } = await import('@stripe/stripe-js');\n      return await loadStripe(cfg.publishableKey);\n    }\n    return null;\n  } catch (err) {\n    console.error('Error initializing Stripe:', err);\n    return null;\n  }\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  FormControlLabel,\n  Switch,\n  Button,\n  CircularProgress,\n  Alert,\n  Snackbar,\n  Box,\n  MenuItem,\n  Chip,\n  Stack,\n  IconButton,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Checkbox,\n  FormGroup,\n  FormLabel,\n} from '@mui/material';\nimport { Add, Delete, Edit, Refresh } from '@mui/icons-material';\nimport {\n  getStripeConfig,\n  updateStripeConfig,\n  testStripeConnection as testStripeConnectionApi,\n  type StripeConfig as StripeConfigType,\n} from '../../services/stripeService';\n\n// ---------- Types ----------\ntype ProductKind = 'tour' | 'event' | 'product';\ntype PaymentMethod =\n  | 'card'\n  | 'link'\n  | 'us_bank_account'\n  | 'cashapp'\n  | 'klarna'\n  | 'afterpay_clearpay'\n  | 'affirm';\n\ninterface PricingTier {\n  key: string; // unique, e.g. 'standard', 'vip'\n  name: string; // display, e.g. 'VIP'\n  description?: string;\n  priceCents: number; // integer cents\n  currency?: string; // default to config.currency\n  appliesTo: ProductKind[]; // which catalog types can use this tier\n  active: boolean;\n}\n\n// Ensure secrets are concrete strings on the form to avoid “possibly undefined”\ninterface StripeConfigForm\n  extends Omit<StripeConfigType, 'updatedAt' | 'metadata' | 'secretKey' | 'webhookSecret'> {\n  secretKey: string;\n  webhookSecret: string;\n  confirmSecretKey: string;\n  confirmWebhookSecret: string;\n  // extended UI-only fields\n  allowedPaymentMethods: PaymentMethod[];\n  pricingTiers: PricingTier[];\n}\n\n// ---------- Constants ----------\nconst ALL_PAYMENT_METHODS: PaymentMethod[] = [\n  'card',\n  'link',\n  'us_bank_account',\n  'cashapp',\n  'klarna',\n  'afterpay_clearpay',\n  'affirm',\n];\n\nconst DEFAULT_TIER: PricingTier = {\n  key: '',\n  name: '',\n  description: '',\n  priceCents: 0,\n  appliesTo: ['tour', 'event', 'product'],\n  active: true,\n};\n\n// ---------- Component ----------\nconst StripeConfig: React.FC = () => {\n  const hasAdminToken =\n    typeof window !== 'undefined' && !!localStorage.getItem('adminToken');\n\n  const [config, setConfig] = useState<StripeConfigForm>({\n    isActive: false,\n    publishableKey: '',\n    secretKey: '',\n    webhookSecret: '',\n    commissionRate: 0,\n    currency: 'USD',\n    // UI-only:\n    allowedPaymentMethods: ['card'],\n    pricingTiers: [],\n    confirmSecretKey: '',\n    confirmWebhookSecret: '',\n  });\n\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [testing, setTesting] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Tier dialog\n  const [tierOpen, setTierOpen] = useState(false);\n  const [tierIndex, setTierIndex] = useState<number | null>(null);\n  const [tierDraft, setTierDraft] = useState<PricingTier>(DEFAULT_TIER);\n\n  // Load config\n  useEffect(() => {\n    const load = async () => {\n      try {\n        setLoading(true);\n        const data = await getStripeConfig();\n\n        const allowedPaymentMethods: PaymentMethod[] =\n          (data as any)?.metadata?.allowedPaymentMethods || ['card'];\n        const pricingTiers: PricingTier[] =\n          (data as any)?.metadata?.pricingTiers || [];\n\n        setConfig((prev) => ({\n          ...prev,\n          ...data,\n          isActive: data?.isActive ?? false,\n          publishableKey: data?.publishableKey ?? '',\n          secretKey: data?.secretKey ?? '',\n          webhookSecret: data?.webhookSecret ?? '',\n          commissionRate: data?.commissionRate ?? 0,\n          currency: data?.currency ?? 'USD',\n          allowedPaymentMethods,\n          pricingTiers,\n          confirmSecretKey: '',\n          confirmWebhookSecret: '',\n        }));\n      } catch (e) {\n        setError('Failed to load configuration');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (hasAdminToken) load();\n    else setLoading(false);\n  }, [hasAdminToken]);\n\n  // -------------- Handlers --------------\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setConfig((prev) => ({\n      ...prev,\n      [name]:\n        name === 'commissionRate'\n          ? Number(value)\n          : type === 'checkbox'\n          ? checked\n          : value,\n    }));\n  };\n\n  const handleSwitch =\n    (name: keyof StripeConfigForm) =>\n    (_e: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n      setConfig((prev) => ({ ...prev, [name]: checked as any }));\n    };\n\n  const togglePaymentMethod = (pm: PaymentMethod) => {\n    setConfig((prev) => {\n      const set = new Set(prev.allowedPaymentMethods);\n      if (set.has(pm)) set.delete(pm);\n      else set.add(pm);\n      const final = Array.from(set);\n      if (final.length === 0) final.push('card'); // always keep at least card\n      return { ...prev, allowedPaymentMethods: final as PaymentMethod[] };\n    });\n  };\n\n  const openAddTier = () => {\n    setTierDraft({ ...DEFAULT_TIER, currency: config.currency });\n    setTierIndex(null);\n    setTierOpen(true);\n  };\n\n  const openEditTier = (idx: number) => {\n    const t = config.pricingTiers[idx];\n    setTierDraft({ ...t, currency: t.currency || config.currency });\n    setTierIndex(idx);\n    setTierOpen(true);\n  };\n\n  const deleteTier = (idx: number) => {\n    setConfig((prev) => ({\n      ...prev,\n      pricingTiers: prev.pricingTiers.filter((_, i) => i !== idx),\n    }));\n  };\n\n  const saveTier = () => {\n    // quick validation\n    if (!tierDraft.key.trim()) return setError('Tier key is required');\n    if (!tierDraft.name.trim()) return setError('Tier name is required');\n    if (!Number.isFinite(tierDraft.priceCents) || tierDraft.priceCents < 0)\n      return setError('Tier price must be a non-negative integer (in cents)');\n\n    setConfig((prev) => {\n      const existsAt =\n        tierIndex === null\n          ? prev.pricingTiers.findIndex((t) => t.key === tierDraft.key)\n          : prev.pricingTiers.findIndex(\n              (t, i) => t.key === tierDraft.key && i !== tierIndex\n            );\n      if (existsAt >= 0) {\n        setError('Tier key must be unique');\n        return prev;\n      }\n\n      const next = [...prev.pricingTiers];\n      if (tierIndex === null) next.push(tierDraft);\n      else next[tierIndex] = tierDraft;\n\n      return { ...prev, pricingTiers: next };\n    });\n\n    setTierOpen(false);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n\n    if (!config.publishableKey.trim())\n      return setError('Publishable key is required');\n    if (!config.secretKey.trim()) return setError('Secret key is required');\n    if (config.secretKey !== config.confirmSecretKey)\n      return setError('Secret keys do not match');\n\n    if (\n      config.webhookSecret &&\n      config.confirmWebhookSecret &&\n      config.webhookSecret !== config.confirmWebhookSecret\n    ) {\n      return setError('Webhook secrets do not match');\n    }\n\n    setSaving(true);\n    try {\n      const {\n        confirmSecretKey,\n        confirmWebhookSecret,\n        allowedPaymentMethods,\n        pricingTiers,\n        ...base\n      } = config;\n\n      // Compose payload; store tier/methods inside metadata\n      const payload: any = {\n        ...base,\n        metadata: {\n          ...(base as any).metadata,\n          allowedPaymentMethods,\n          pricingTiers: (pricingTiers || []).map((t: PricingTier) => ({\n            ...t,\n            priceCents: Math.round(Number(t.priceCents) || 0),\n            currency: t.currency || config.currency,\n          })),\n        },\n      };\n\n      await updateStripeConfig(payload);\n\n      setSuccess('Configuration saved successfully');\n\n      // Refresh values from API\n      const updated = await getStripeConfig();\n      setConfig((prev) => ({\n        ...prev,\n        ...updated,\n        allowedPaymentMethods:\n          (updated as any)?.metadata?.allowedPaymentMethods ||\n          prev.allowedPaymentMethods,\n        pricingTiers:\n          (updated as any)?.metadata?.pricingTiers || prev.pricingTiers,\n        confirmSecretKey: '',\n        confirmWebhookSecret: '',\n      }));\n    } catch (err: any) {\n      setError(err?.message || 'Failed to save configuration');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const testStripeConnection = async () => {\n    try {\n      setTesting(true);\n      // Backend test endpoint requires NO BODY\n      const res = await testStripeConnectionApi();\n      setSuccess(\n        res?.message ||\n          'Stripe connection check succeeded (see server logs for details).'\n      );\n    } catch (e: any) {\n      setError(e?.message || 'Stripe connection test failed');\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const currencySymbol = useMemo(() => {\n    try {\n      return new Intl.NumberFormat(undefined, {\n        style: 'currency',\n        currency: config.currency || 'USD',\n      })\n        .formatToParts(1)\n        .find((p) => p.type === 'currency')?.value;\n    } catch {\n      return '$';\n    }\n  }, [config.currency]);\n\n  // -------------- Render --------------\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (!hasAdminToken) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">You do not have permission to access this page.</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 6 }}>\n      <Box display=\"flex\" alignItems=\"center\" gap={2} mb={1}>\n        <Typography variant=\"h4\">Stripe Configuration</Typography>\n        <Tooltip title=\"Test connection\">\n          <span>\n            <IconButton onClick={testStripeConnection} disabled={testing}>\n              <Refresh />\n            </IconButton>\n          </span>\n        </Tooltip>\n      </Box>\n\n      {!!error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\n\n      <Paper sx={{ p: 3 }}>\n        <form onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={!!config.isActive}\n                    onChange={handleSwitch('isActive')}\n                    name=\"isActive\"\n                    disabled={saving}\n                  />\n                }\n                label=\"Enable Stripe Payments\"\n              />\n            </Grid>\n\n            {/* Keys + currency */}\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Publishable Key\"\n                name=\"publishableKey\"\n                value={config.publishableKey}\n                onChange={handleChange}\n                required\n                disabled={saving}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                select\n                fullWidth\n                label=\"Currency\"\n                name=\"currency\"\n                value={config.currency}\n                onChange={handleChange}\n                disabled={saving}\n              >\n                {['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JMD'].map((cur) => (\n                  <MenuItem key={cur} value={cur}>\n                    {cur}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Secret Key\"\n                name=\"secretKey\"\n                type=\"password\"\n                value={config.secretKey}\n                onChange={handleChange}\n                required\n                disabled={saving}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Confirm Secret Key\"\n                name=\"confirmSecretKey\"\n                type=\"password\"\n                value={config.confirmSecretKey}\n                onChange={handleChange}\n                required\n                disabled={saving}\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Webhook Secret\"\n                name=\"webhookSecret\"\n                type=\"password\"\n                value={config.webhookSecret}\n                onChange={handleChange}\n                disabled={saving}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Confirm Webhook Secret\"\n                name=\"confirmWebhookSecret\"\n                type=\"password\"\n                value={config.confirmWebhookSecret}\n                onChange={handleChange}\n                disabled={saving}\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                type=\"number\"\n                inputProps={{ step: '0.1', min: 0, max: 100 }}\n                label=\"Commission Rate (%)\"\n                name=\"commissionRate\"\n                value={config.commissionRate}\n                onChange={handleChange}\n                disabled={saving}\n              />\n            </Grid>\n\n            {/* Allowed payment methods */}\n            <Grid item xs={12}>\n              <FormLabel component=\"legend\" sx={{ mb: 1 }}>\n                Allowed Payment Methods\n              </FormLabel>\n              <FormGroup row>\n                {ALL_PAYMENT_METHODS.map((pm) => (\n                  <FormControlLabel\n                    key={pm}\n                    control={\n                      <Checkbox\n                        checked={config.allowedPaymentMethods.includes(pm)}\n                        onChange={() => togglePaymentMethod(pm)}\n                      />\n                    }\n                    label={pm}\n                  />\n                ))}\n              </FormGroup>\n            </Grid>\n\n            {/* Pricing tiers */}\n            <Grid item xs={12} mt={2}>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\n                <Typography variant=\"h6\">Pricing Tiers</Typography>\n                <Button startIcon={<Add />} variant=\"outlined\" onClick={openAddTier}>\n                  Add Tier\n                </Button>\n              </Box>\n\n              {config.pricingTiers.length === 0 ? (\n                <Alert severity=\"info\">No tiers yet. Add at least one (e.g., Standard, VIP).</Alert>\n              ) : (\n                <Box>\n                  {config.pricingTiers.map((t, idx) => (\n                    <Paper key={t.key} variant=\"outlined\" sx={{ p: 2, mb: 1 }}>\n                      <Grid container spacing={1} alignItems=\"center\">\n                        <Grid item xs={12} md={3}>\n                          <Typography fontWeight={600}>\n                            {t.name}{' '}\n                            <Typography component=\"span\" color=\"text.secondary\">\n                              ({t.key})\n                            </Typography>\n                          </Typography>\n                          {t.description && (\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              {t.description}\n                            </Typography>\n                          )}\n                        </Grid>\n                        <Grid item xs={12} md={2}>\n                          <Typography>\n                            {currencySymbol}\n                            {(t.priceCents / 100).toFixed(2)}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                          <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">\n                            {t.appliesTo.map((a) => (\n                              <Chip key={a} label={a} size=\"small\" />\n                            ))}\n                          </Stack>\n                        </Grid>\n                        <Grid item xs={12} md={1}>\n                          <Chip\n                            size=\"small\"\n                            label={t.active ? 'active' : 'inactive'}\n                            color={t.active ? 'success' : 'default'}\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={2} textAlign=\"right\">\n                          <IconButton onClick={() => openEditTier(idx)}>\n                            <Edit />\n                          </IconButton>\n                          <IconButton color=\"error\" onClick={() => deleteTier(idx)}>\n                            <Delete />\n                          </IconButton>\n                        </Grid>\n                      </Grid>\n                    </Paper>\n                  ))}\n                </Box>\n              )}\n            </Grid>\n\n            <Grid item xs={12} mt={2}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={saving}\n                startIcon={saving ? <CircularProgress size={18} /> : undefined}\n              >\n                {saving ? 'Saving…' : 'Save Configuration'}\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n\n      <Snackbar open={!!success} autoHideDuration={5000} onClose={() => setSuccess('')} message={success} />\n      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>\n        <Alert severity=\"error\" onClose={() => setError('')}>\n          {error}\n        </Alert>\n      </Snackbar>\n\n      {/* Tier Dialog */}\n      <Dialog open={tierOpen} onClose={() => setTierOpen(false)} fullWidth maxWidth=\"sm\">\n        <DialogTitle>{tierIndex === null ? 'Add Pricing Tier' : 'Edit Pricing Tier'}</DialogTitle>\n        <DialogContent dividers>\n          <Grid container spacing={2} sx={{ mt: 0 }}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"Tier Key\"\n                fullWidth\n                value={tierDraft.key}\n                onChange={(e) => setTierDraft((p) => ({ ...p, key: e.target.value.trim() }))}\n                helperText=\"Unique ID (e.g., standard, vip)\"\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"Tier Name\"\n                fullWidth\n                value={tierDraft.name}\n                onChange={(e) => setTierDraft((p) => ({ ...p, name: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                label=\"Description\"\n                fullWidth\n                multiline\n                minRows={2}\n                value={tierDraft.description || ''}\n                onChange={(e) => setTierDraft((p) => ({ ...p, description: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"Price (cents)\"\n                type=\"number\"\n                fullWidth\n                inputProps={{ min: 0, step: 1 }}\n                value={tierDraft.priceCents}\n                onChange={(e) =>\n                  setTierDraft((p) => ({\n                    ...p,\n                    priceCents: Math.max(0, parseInt(e.target.value || '0', 10)),\n                  }))\n                }\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                select\n                label=\"Currency\"\n                fullWidth\n                value={tierDraft.currency || config.currency}\n                onChange={(e) => setTierDraft((p) => ({ ...p, currency: e.target.value } as PricingTier))}\n              >\n                {['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JMD'].map((cur) => (\n                  <MenuItem key={cur} value={cur}>\n                    {cur}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item xs={12}>\n              <FormLabel sx={{ mb: 1, display: 'block' }}>Applies To</FormLabel>\n              <Stack direction=\"row\" spacing={1}>\n                {(['tour', 'event', 'product'] as ProductKind[]).map((kind) => {\n                  const checked = tierDraft.appliesTo.includes(kind);\n                  return (\n                    <Chip\n                      key={kind}\n                      label={kind}\n                      color={checked ? 'primary' : 'default'}\n                      variant={checked ? 'filled' : 'outlined'}\n                      onClick={() =>\n                        setTierDraft((p) => {\n                          const set = new Set(p.appliesTo);\n                          if (set.has(kind)) set.delete(kind);\n                          else set.add(kind);\n                          const arr = Array.from(set) as ProductKind[];\n                          return { ...p, appliesTo: arr.length ? arr : (['tour'] as ProductKind[]) };\n                        })\n                      }\n                    />\n                  );\n                })}\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={tierDraft.active}\n                    onChange={(_, chk) => setTierDraft((p) => ({ ...p, active: chk }))}\n                  />\n                }\n                label=\"Active\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setTierOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={saveTier}>\n            Save Tier\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default StripeConfig;\n\n"],"names":["Refresh","createSvgIcon","_jsx","ADMIN_CONFIG","ADMIN_TEST","adminAuthHeaders","token","getStripeConfig","headers","res","api","payload","_a","updateStripeConfig","config","testStripeConnection","success","_c","_b","message","_d","_f","_e","error","_h","_g","ALL_PAYMENT_METHODS","DEFAULT_TIER","StripeConfig","hasAdminToken","setConfig","useState","loading","setLoading","saving","setSaving","testing","setTesting","setError","setSuccess","tierOpen","setTierOpen","tierIndex","setTierIndex","tierDraft","setTierDraft","useEffect","data","allowedPaymentMethods","pricingTiers","prev","handleChange","e","name","value","type","checked","handleSwitch","togglePaymentMethod","pm","set","final","openAddTier","openEditTier","idx","t","deleteTier","_","i","saveTier","next","handleSubmit","confirmSecretKey","confirmWebhookSecret","base","updated","err","testStripeConnectionApi","currencySymbol","useMemo","p","jsx","Box","CircularProgress","jsxs","Container","Typography","Tooltip","IconButton","Alert","Paper","Grid","FormControlLabel","Switch","TextField","cur","MenuItem","FormLabel","FormGroup","Checkbox","Button","Add","Stack","a","Chip","Edit","Delete","Snackbar","Dialog","DialogTitle","DialogContent","kind","arr","chk","DialogActions"],"mappings":"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","x_google_ignoreList":[0]}